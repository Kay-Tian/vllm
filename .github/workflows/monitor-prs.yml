name: Monitor vLLM PR File Changes

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  check-vllm-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up tools and authenticate gh CLI
        run: |
          # 安装依赖工具
          sudo apt-get update && sudo apt-get install -y jq mailutils
          
          # 安装 GitHub CLI（gh）
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y
          
          # 验证 gh 安装成功
          if ! command -v gh &> /dev/null; then
            echo "❌ gh 安装失败，请检查安装步骤"
            exit 1
          fi
          echo "✅ gh 安装成功，版本: $(gh --version)"
          
          # 关键：使用 PAT 认证 gh CLI（确保令牌正确传递）
          echo "开始使用 PAT 认证 gh CLI..."
          if [ -z "${{ secrets.PAT }}" ]; then
            echo "❌ 未配置 PAT，请在仓库 Secrets 中添加 PAT"
            exit 1
          fi
          
          # 执行认证（直接通过管道传递令牌）
          echo "${{ secrets.PAT }}" | gh auth login --with-token
          
          # 强制验证认证状态（检查是否有权限访问当前仓库）
          echo "验证认证状态..."
          if ! gh repo view ${{ github.repository }} &> /dev/null; then
            echo "❌ gh 认证失败！可能原因："
            echo "1. PAT 权限不足（需至少勾选 public_repo）"
            echo "2. PAT 已过期或被撤销"
            echo "3. Secrets 中 PAT 的名称不是 'PAT'"
            exit 1
          fi
          echo "✅ gh 认证成功"

      - name: Restore processed PRs cache
        uses: actions/cache@v3
        with:
          path: .processed_prs.json
          key: processed-prs-${{ github.run_id }}
          restore-keys: |
            processed-prs-

      - name: Initialize processed PRs file
        run: |
          if [ ! -f .processed_prs.json ]; then
            echo "[]" > .processed_prs.json
            echo "初始化空的已处理PR文件"
          fi

      - name: Fetch open PRs and check files
        env:
          TARGET_REPO: "vllm-project/vllm"
          WATCH_FILES: |
            vllm/attention/layer.py
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          set -euo pipefail

          PROCESSED_PRS=$(cat .processed_prs.json)
          echo "当前已处理PR列表: $PROCESSED_PRS"

          # 获取开放PR列表
          PR_API_URL="https://api.github.com/repos/$TARGET_REPO/pulls?state=open&per_page=100"
          PR_RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: token $GITHUB_TOKEN" "$PR_API_URL")
          PR_HTTP_CODE=$(echo "$PR_RESPONSE" | tail -n1)
          PR_BODY=$(echo "$PR_RESPONSE" | head -n -1)
          if [ "$PR_HTTP_CODE" -ne 200 ]; then
            echo "❌ 获取PR列表失败，状态码: $PR_HTTP_CODE"
            exit 1
          fi
          PR_LIST=$(echo "$PR_BODY" | jq -r '.[]?.number | select(. != null)')
          echo "获取到的PR列表: $PR_LIST"

          for pr in $PR_LIST; do
            echo "=== 处理 PR #$pr ==="
            
            if echo "$PROCESSED_PRS" | jq -e --arg pr "$pr" '. | index($pr)' > /dev/null; then
              echo "PR #$pr 已处理，跳过"
              continue
            fi

            # 获取PR详情
            PR_DETAIL_URL="https://api.github.com/repos/$TARGET_REPO/pulls/$pr"
            PR_DETAIL_RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: token $GITHUB_TOKEN" "$PR_DETAIL_URL")
            PR_DETAIL_HTTP_CODE=$(echo "$PR_DETAIL_RESPONSE" | tail -n1)
            echo "PR_DETAIL_HTTP_CODE : $PR_DETAIL_HTTP_CODE"
            if [ "$PR_DETAIL_HTTP_CODE" -ne 200 ]; then
              echo "❌ 获取PR #$pr 详情失败，跳过"
              continue
            fi
            PR_DETAIL_BODY=$(echo "$PR_DETAIL_RESPONSE" | head -n -1)
            PR_TITLE=$(echo "$PR_DETAIL_BODY" | jq -r '.title')
            PR_URL=$(echo "$PR_DETAIL_BODY" | jq -r '.html_url')

            # 获取变更文件
            FILES_URL="https://api.github.com/repos/$TARGET_REPO/pulls/$pr/files"
            FILES_RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: token $GITHUB_TOKEN" "$FILES_URL")
            FILES_HTTP_CODE=$(echo "$FILES_RESPONSE" | tail -n1)
            echo "FILES_HTTP_CODE : $FILES_HTTP_CODE"
            if [ "$FILES_HTTP_CODE" -ne 200 ]; then
              echo "❌ 获取PR #$pr 变更文件失败，跳过"
              continue
            fi
            FILES_BODY=$(echo "$FILES_RESPONSE" | head -n -1)
            FILES=$(echo "$FILES_BODY" | jq -r '.[]?.filename | select(. != null)')
            echo "FILES : $FILES"
            
            # 检查目标文件匹配
            TARGET_FILES_CHANGED=""
            while IFS= read -r watch_path; do
              [ -z "$watch_path" ] && continue
              MATCHED_FILES=$(echo "$FILES" | grep -E "^$watch_path" || true)
              [ -n "$MATCHED_FILES" ] && TARGET_FILES_CHANGED+="$MATCHED_FILES"$'\n'
            done <<< "$WATCH_FILES"
            echo "TARGET_FILES_CHANGED : $TARGET_FILES_CHANGED"

            # 若有匹配文件，创建Issue
            if [ -n "$TARGET_FILES_CHANGED" ]; then
              FORMATTED_FILES=$(echo "$TARGET_FILES_CHANGED" | awk '{print "- " $0}' | head -10)
              [ $(echo "$TARGET_FILES_CHANGED" | wc -l) -gt 10 ] && FORMATTED_FILES+=$'\n- ... 更多文件'
              
              ISSUE_BODY=$(printf "## vLLM PR 监控通知\n\n**PR 标题**: %s  \n**PR 编号**: #%s  \n**PR 链接**: %s  \n\n### 变更的核心文件:\n%s\n\n*由GitHub Actions自动创建*" \
                "$PR_TITLE" "$pr" "$PR_URL" "$FORMATTED_FILES")
              
              echo "创建Issue通知..."
              gh issue create \
                --repo ${{ github.repository }} \
                --title "vLLM PR #$pr 变更核心文件提醒" \
                --body "$ISSUE_BODY" \
                --label "vLLM-monitor"
            fi

            # 标记PR为已处理
            PROCESSED_PRS=$(echo "$PROCESSED_PRS" | jq --arg pr "$pr" '. + [$pr]')
            echo "$PROCESSED_PRS" > .processed_prs.json
          done

      - name: Clean up old PRs
        run: |
          [ -f .processed_prs.json ] && jq 'if length > 100 then .[-100:] else . end' .processed_prs.json > .tmp.json && mv .tmp.json .processed_prs.json
