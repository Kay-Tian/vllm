name: Monitor vLLM PR File Changes

on:
  schedule:
    - cron: '0 * * * *'  # 每小时运行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  check-vllm-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up tools
        run: |
          sudo apt-get install -y jq mailutils
          # 安装GitHub CLI
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y
          # 配置gh CLI认证
          echo "${{ secrets.PAT }}" | gh auth login --with-token

      - name: Restore processed PRs cache
        id: cache-processed-prs
        uses: actions/cache@v3
        with:
          path: .processed_prs.json
          key: processed-prs-${{ github.run_id }}
          restore-keys: |
            processed-prs-

      - name: Initialize processed PRs file if not exists
        run: |
          if [ ! -f .processed_prs.json ]; then
            echo "[]" > .processed_prs.json
            echo "Initialized empty processed PRs file"
          else
            echo "Loaded existing processed PRs file: $(cat .processed_prs.json)"
          fi

      - name: Fetch open PRs and check files
        env:
          TARGET_REPO: "vllm-project/vllm"
          WATCH_FILES: |
            vllm/attention/layer.py
          GITHUB_TOKEN: ${{ secrets.PAT }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
        run: |
          # 启用严格模式：遇到错误立即退出，显示未定义变量，管道错误传递
          set -euo pipefail

          # 读取已处理的PR列表
          PROCESSED_PRS=$(cat .processed_prs.json)
          echo "已处理的PR列表: $PROCESSED_PRS"
          
          # 1. 获取vLLM仓库的open PR列表（最多100个）
          echo "=== 开始获取 $TARGET_REPO 的开放PR ==="
          PR_API_URL="https://api.github.com/repos/$TARGET_REPO/pulls?state=open&per_page=100"
          echo "请求API: $PR_API_URL"
          
          # 发送请求并检查状态码（关键！）
          PR_RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: token $GITHUB_TOKEN" "$PR_API_URL")
          PR_HTTP_CODE=$(echo "$PR_RESPONSE" | tail -n1)
          PR_BODY=$(echo "$PR_RESPONSE" | head -n -1)
          
          if [ "$PR_HTTP_CODE" -ne 200 ]; then
            echo "❌ 获取PR列表失败，HTTP状态码: $PR_HTTP_CODE"
            echo "API返回内容: $PR_BODY"
            exit 1
          fi
          
          # 提取PR编号（过滤空值）
          PR_LIST=$(echo "$PR_BODY" | jq -r '.[]?.number | select(. != null)')
          echo "获取到的PR列表: $PR_LIST"
          
          if [ -z "$PR_LIST" ]; then
            echo "⚠️ 未找到开放的PR，退出流程"
            exit 0
          fi

          # 2. 遍历每个PR，检查文件变更
          for pr in $PR_LIST; do
            echo -e "\n=== 开始处理 PR #$pr ==="
            
            # 检查PR是否已处理
            if echo "$PROCESSED_PRS" | jq -e --arg pr "$pr" '. | index($pr)' > /dev/null; then
              echo "ℹ️ PR #$pr 已处理，跳过"
              continue
            fi

            # 获取PR详细信息（带状态码检查）
            echo "获取PR #$pr 详情..."
            PR_DETAIL_URL="https://api.github.com/repos/$TARGET_REPO/pulls/$pr"
            PR_DETAIL_RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: token $GITHUB_TOKEN" "$PR_DETAIL_URL")
            PR_DETAIL_HTTP_CODE=$(echo "$PR_DETAIL_RESPONSE" | tail -n1)
            PR_DETAIL_BODY=$(echo "$PR_DETAIL_RESPONSE" | head -n -1)
            
            if [ "$PR_DETAIL_HTTP_CODE" -ne 200 ]; then
              echo "❌ 获取PR #$pr 详情失败，HTTP状态码: $PR_DETAIL_HTTP_CODE"
              echo "API返回内容: $PR_DETAIL_BODY"
              continue  # 跳过错误的PR，继续处理下一个
            fi
            
            # 提取PR关键信息
            PR_TITLE=$(echo "$PR_DETAIL_BODY" | jq -r '.title')
            PR_AUTHOR=$(echo "$PR_DETAIL_BODY" | jq -r '.user.login')
            PR_URL=$(echo "$PR_DETAIL_BODY" | jq -r '.html_url')
            PR_CREATED_AT=$(echo "$PR_DETAIL_BODY" | jq -r '.created_at')
            
            echo "PR信息: 标题=$PR_TITLE, 作者=$PR_AUTHOR, URL=$PR_URL"
            
            # 获取PR变更文件（带状态码检查）
            echo "获取PR #$pr 的变更文件..."
            FILES_URL="https://api.github.com/repos/$TARGET_REPO/pulls/$pr/files"
            FILES_RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: token $GITHUB_TOKEN" "$FILES_URL")
            FILES_HTTP_CODE=$(echo "$FILES_RESPONSE" | tail -n1)
            FILES_BODY=$(echo "$FILES_RESPONSE" | head -n -1)
            
            if [ "$FILES_HTTP_CODE" -ne 200 ]; then
              echo "❌ 获取PR #$pr 变更文件失败，HTTP状态码: $FILES_HTTP_CODE"
              echo "API返回内容: $FILES_BODY"
              continue  # 跳过错误的PR，继续处理下一个
            fi
            
            FILES=$(echo "$FILES_BODY" | jq -r '.[]?.filename | select(. != null)')
            echo "PR #$pr 变更的文件: $FILES"

            # 检查是否包含关注的文件/目录
            TARGET_FILES_CHANGED=""
            while IFS= read -r watch_path; do
              if [ -z "$watch_path" ]; then
                continue
              fi
              
              MATCHED_FILES=$(echo "$FILES" | grep -E "^$watch_path")
              if [ -n "$MATCHED_FILES" ]; then
                TARGET_FILES_CHANGED+="$MATCHED_FILES"$'\n'
              fi
            done <<< "$WATCH_FILES"

            # 如果有目标文件变更，执行通知
            if [ -n "$TARGET_FILES_CHANGED" ]; then
              echo "✅ 发现目标文件变更: $TARGET_FILES_CHANGED"
              
              # 格式化文件列表
              FORMATTED_FILES=$(echo "$TARGET_FILES_CHANGED" | awk '{print "- " $0}' | head -10)
              if [ $(echo "$TARGET_FILES_CHANGED" | wc -l) -gt 10 ]; then
                FORMATTED_FILES+=$'\n- ... 更多文件'
              fi
              
              # 创建Issue通知
              echo "创建Issue通知..."
              ISSUE_BODY=$(printf "## vLLM PR 监控通知\n\n**PR 标题**: %s  \n**PR 编号**: #%s  \n**作者**: @%s  \n**创建时间**: %s  \n**PR 链接**: %s  \n\n### 变更的核心文件:\n%s\n\n### 监控说明:\n此PR修改了vLLM的核心文件，需要关注其对性能、稳定性和功能的影响。\n\n---\n*由GitHub Actions自动创建*" \
                "$PR_TITLE" "$pr" "$PR_AUTHOR" "$PR_CREATED_AT" "$PR_URL" "$FORMATTED_FILES")
              
              gh issue create \
                --repo ${{ github.repository }} \
                --title "vLLM PR #$pr 变更核心文件提醒" \
                --body "$ISSUE_BODY" \
                --label "vLLM-monitor" "PR-alert"

              # Slack通知（可选）
              if [ -n "$SLACK_WEBHOOK" ]; then
                echo "发送Slack通知..."
                SLACK_PAYLOAD=$(jq -n \
                  --arg title "vLLM PR #$pr 变更核心文件提醒" \
                  --arg author "$PR_AUTHOR" \
                  --arg url "$PR_URL" \
                  --arg files "$FORMATTED_FILES" \
                  '{
                    "text": "*vLLM PR 监控通知*",
                    "attachments": [
                      {
                        "title": $title,
                        "title_link": $url,
                        "fields": [
                          {"title": "作者", "value": $author, "short": true},
                          {"title": "PR编号", "value": "#'"$pr"'", "short": true}
                        ],
                        "text": "*变更的核心文件:*\n" + $files,
                        "color": "#FFA500"
                      }
                    ]
                  }')
                
                curl -X POST -H "Content-Type: application/json" -d "$SLACK_PAYLOAD" "$SLACK_WEBHOOK"
              fi
            fi

            # 标记PR为已处理
            PROCESSED_PRS=$(echo "$PROCESSED_PRS" | jq --arg pr "$pr" '. + [$pr]')
            echo "PR #$pr 标记为已处理"
          done

          # 保存已处理的PR列表
          echo "$PROCESSED_PRS" > .processed_prs.json
          echo -e "\n=== 已处理的PR列表更新完成 ==="

      - name: Clean up old processed PRs (keep last 100)
        run: |
          if [ -f .processed_prs.json ]; then
            PROCESSED_PRS=$(cat .processed_prs.json)
            TRIMMED_PRS=$(echo "$PROCESSED_PRS" | jq 'if length > 100 then .[-100:] else . end')
            echo "$TRIMMED_PRS" > .processed_prs.json
            echo "清理后保留的PR数量: $(echo "$TRIMMED_PRS" | jq '. | length')"
          fi
